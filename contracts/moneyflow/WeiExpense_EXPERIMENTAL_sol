pragma solidity ^0.4.15;

import "./IWeiReceiver.sol";
import "./IWeiSplitter.sol";
import "./IWeiDestination.sol";

import "zeppelin-solidity/contracts/math/SafeMath.sol";
import "zeppelin-solidity/contracts/ownership/Ownable.sol";

//////////////////////////////////////////////////////
contract Expense is IWeiReceiver, IWeiDestination, Ownable {
	bool isMoneyReceived = false;
	uint periodHours = 0;
	uint64 momentReceived = 0;
	address moneySource = 0x0;

	function Expense(uint _periodHours) public {
		periodHours = _periodHours;
	}

	function internalGetTotalWeiNeeded(uint _inputWei)constant public returns(uint);
	function internalGetMinWeiNeeded()constant public returns(uint);

	function processFunds(uint _currentFlow) public payable{
		require(isNeedsMoney());

		require(msg.value==getTotalWeiNeeded(_currentFlow));

		if(0!=periodHours){ // TODO: why not works without if
			momentReceived = uint64(now);
		}

		isMoneyReceived = true;
		moneySource = msg.sender;
	}

	function getIsMoneyReceived() constant public returns(bool){
		return isMoneyReceived;
	}

	function getTotalWeiNeeded(uint _inputWei)constant public returns(uint){
		if(!isNeedsMoney()){
			return 0;
		}

		return internalGetTotalWeiNeeded(_inputWei);
	}

	function getMinWeiNeeded()constant public returns(uint){
		if(!isNeedsMoney()){
			return 0;
		}
		return internalGetMinWeiNeeded();
	}

	function isNeedsMoney()constant public returns(bool){	
		if(0!=periodHours){ // For period expense
			if ((uint64(now) - momentReceived) >= periodHours * 3600 * 1000){ 
				return true;
			}
		}
		return !isMoneyReceived;
	}

	modifier onlyByMoneySource() { 
		require(msg.sender==moneySource); 
		_; 
	}

	// TODO: remove from here
	function getNow()constant public returns(uint){
		return now;
	}

	function flush()public onlyOwner{
		msg.sender.transfer(this.balance);
	}

	function flushTo(address _to) public onlyOwner {
		revert();
	}

	function()public{
	}
}

contract AbsoluteExpense {
	uint neededWei = 0;

	function AbsoluteExpense(uint _neededWei){
		neededWei = _neededWei;
	}

	function internalGetTotalWeiNeeded(uint _inputWei)constant public returns(uint){
		return neededWei;
	}

	function internalGetMinWeiNeeded()constant public returns(uint){
		return neededWei;
	}

	function getNeededWei() constant public returns(uint){
		return neededWei;
	}	

	function getPercentsMul100()constant public returns(uint){
		return 0;
	}

	function setNeededWei(uint _neededWei) public onlyOwner {
		neededWei = _neededWei;
	}
	
	function setPercents(uint _percentsMul100) public onlyOwner {
		
	}
}

contract RelativeExpense {
	uint percentsMul100 = 0;

	function RelativeExpense(uint _percentsMul100){
		percentsMul100 = _percentsMul100;
	}

	function internalGetTotalWeiNeeded(uint _inputWei)constant public returns(uint){
		return (percentsMul100 * _inputWei) / 10000;
	}

	function internalGetMinWeiNeeded()constant public returns(uint){
		return 0;
	}

	function getNeededWei() constant public returns(uint){
		return 0;
	}

	function getPercentsMul100()constant public returns(uint){
		return percentsMul100;
	}

	function setNeededWei(uint _neededWei) public onlyOwner {
		
	}
	
	function setPercents(uint _percentsMul100) public onlyOwner {
		percentsMul100 = _percentsMul100;
	}
}

contract WeiAbsoluteExpense is Expense, AbsoluteExpense {
	function WeiAbsoluteExpense(uint _neededWei) public 
		Expense(0) AbsoluteExpense(_neededWei)
	{}
}

contract WeiRelativeExpense is Expense, RelativeExpense {
	function WeiRelativeExpense(uint _percentsMul100)public 
		Expense(0) RelativeExpense(_percentsMul100)
	{}
}

contract WeiAbsoluteExpenseWithPeriod is Expense, AbsoluteExpense { 
	function WeiAbsoluteExpenseWithPeriod(uint _neededWei, uint _periodHours) public
		Expense(_periodHours) AbsoluteExpense(_neededWei)
	{}
}

contract WeiRelativeExpenseWithPeriod is Expense, RelativeExpense {
	function WeiRelativeExpenseWithPeriod(uint _percentsMul100, uint _periodHours) public 
		Expense(_periodHours) RelativeExpense(_percentsMul100)
	{}
}
